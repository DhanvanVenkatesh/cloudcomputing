MONGODB

npm init

npm install mongoose method-override express ejs body-parser

create views folder:
    1. index.ejs
    2. update.ejs
    3. delete.ejs

index.js:

Login to mongodb to get the mongodb connection url

const express = require("express")
const app = express()
const methodOverride = require("method-override")
const bodyparser = require("body-parser")
const mongoose = require("mongoose")
const path = require("path")

app.set("view engine", "ejs")
app.use(bodyparser.json())
app.use(methodOverride("_method"))
app.use(bodyparser.urlencoded({extended:true}))

app.listen(8000, ()=>{
    console.log("App Is Listening 8000")
})


mongoose.connect("mongodb+srv://thiru:thiru@cluster0.k7dehrq.mongodb.net/?retryWrites=true&w=majority", {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(()=>{
    console.log("DB Connected")
})
.catch((err)=>{
    console.log(err)
})


const userSchema = new mongoose.Schema({
    name:{
        type: String
    },
    email:{
        type: String
    },
    password:{
        type: String
    }
})

const stud = mongoose.model("stud", userSchema)

app.get("/", (req, res)=>{
    stud.find().then(data=>{
        res.render("index", {title: "Home Page", data:data, email:"Enter your email"})
    })
})


app.post("/add-item", (req, res)=>{
    const user = new stud({
        name: req.body.name,
        email: req.body.email,
        password: req.body.password
    })
    user.save().then(()=>{
        console.log("Connected")
    })
    .catch((err)=>{
        console.log(err)
    })
    res.redirect("/")
})


app.get("/display", (req, res)=>{
    stud.find().then(data=>{
        res.json(data)
    })
})  

app.put("/update/:id", (req, res)=>{
    const email = req.body.email
    const name = req.body.name
    stud.findOne({
        email: email    
    }).then(data=>{
        data.name = name
        data.save().then(()=>{
            console.log("Updated")
        })
    })
    stud.find().then(data=>{
        res.render("index", {title: "Home Page", data:data})
    })
})

app.get("/edit/:id", (req, res)=>{
    const email = req.params.id
    stud.find().then(data=>{
        res.render("update", {email:email})
    })
})


app.get("/delete/:id", (req, res)=>{
    stud.findOne({
        email: req.params.id
    })
    .then(()=>{
        res.render("delete", {email: req.params.id})
    })
})

app.delete("/delete/:id", (req, res)=>{
    const email = req.body.email
    stud.findOne({
        email:email
    })
    .then(data=>{
        stud.deleteOne({
            email:data.email
        })
        .then(()=>{
            console.log("Successfully Deleted")
        })
        .catch((err)=>{

            console.log(err)
        })
    })
    res.redirect("/")
})



index.ejs:
<html>
    <body>
        <h1><%= title %></h1>
        <br>
        <form action="/add-item" method="post">
            <label>Name</label>
            <input type="text" name="name">
            <br><br>
            <label>email</label>
            <input type="text" name="email">
            <br><br>
            <label>password</label>
            <input type="text" name="password">
            <br><br>
            <input type="submit" value="submit">
        </form>
        <br>
        DATA:
        <br>
        <% for(var i = 0; i < data.length; i++){ %>
            <%= data[i].name %>
            <%= data[i].email %>
            <%= data[i].password %>
        <% } %>
        <br>
        <br>

    </body>
</html>

 update.ejs:
<form action="/update/<%=email%>?_method=PUT" method="post">
    <input type="hidden" value="PUT" name="_method">
    <br>
    <input type="email" name="email" value="<%=email%>">
    <br>
    <label>Name</label>
    <input type="name" name="name">
    <br>
    <input type="submit" name="submit">
</form>

delete.ejs:
<form action="/delete/<%=email%>?_method=DELETE" method="post">
    <input type="hidden" value="DELETE" name="_method">
    <br>
    <input type="email" name="email" value="<%=email%>">
    <br>
    <input type="submit" name="submit">
</form>



